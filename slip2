//Write a Java Program to implement Singleton pattern for multithreading.

/*Solution-Singleton is one of the most widely used creational design pattern to restrict the object created by applications. If you are using it in a multi-threaded environment, then the thread-safety of the singleton class is very important. In real-world applications, resources like Database connections or Enterprise Information Systems (EIS) are limited and should be used wisely to avoid any resource crunch. To achieve this, we can implement a Singleton design pattern. 

We can create a wrapper class for the resource and limit the number of objects created at runtime to one. In general, we follow the below steps to create a singleton class:
Create the private constructor to avoid any new object creation with new operator.
Declare a private static instance of the same class.
Provide a public static method that will return the singleton class instance variable. If the variable is not initialized then initialize it or else simply return the instance variable.
*/

1.package com.journaldev.designpatterns;

public class ASingleton {

	private static ASingleton instance = null;

	private ASingleton() {
	}

	public static ASingleton getInstance() {
		if (instance == null) {
			instance = new ASingleton();
		}
		return instance;
	}}

2.package com.journaldev.designpatterns;

public class ASingleton {

	private static ASingleton instance = null;

	private ASingleton() {
	}
	public static ASingleton getInstance() {
		if (instance == null) {
			instance = new ASingleton();
		}		return instance;}}


//find null values
//(1-3)Prepare scatter plot,find all null values in given dataset and remove them,categorical values in numeric format for given database

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset=pd.read_csv("")
dataset.dtypes
dataset.isnull().sum()
x=dataset.iloc[:,:-1]
y=dataset.iloc[:,-1]

from sklearn.impute import SimpleImputer
imp=SimpleImputer(missing_values=np.NaN,strategy='mean')
Imputer=imp.fit(x[:,1:3])

from sklearn.impute import SimpleImputer
imp=SimpleImputer(missing_values=np.NaN,strategy='mean')
Imputer=imp.fit(x[:,1:3])
x[:,1:3]=imp.transform(x[:,1:3])

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[0])],remainder='passthrough')
x=np.array(ct.fit_transform(x))
print(x)

print(y)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

print(x_train)
print(x_test)
print(y_train)
print(y_test)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)
print(x_train)
print(x_test)

// employee registration

<html>
<head>
<title>Employee Registration</title>
<script>
function validation form(){
var dob=document.getElementById("dob").value;
var joiningDate=document.getElementById("joining-date").value;
var salary=document.getElementbyId("salary").value;
var dateExp=/^\d{4}-\d{2}-\d{2}$/;
var salaryExp=/^\d+(\.\d{1,2})?$/;
if (!dateExp.test(dob)){
alert("Invalid Date Of Birth format.Please use YYYY-MM-DD.");
return false;
}
if (!dateExp.test(joiningDate)){
alert("Invalid Joining Date format.Please use YYYY-MM-DD.");
return false;
}
if (!salaryExp.test(salary)){
alert("Invalid Salary.Please enter a valid positive number. ");
return false;
}
}
</script>
</head>
<body>
<h1>Employee Registration Form</h1>
<form onsubmit="return validationForm()">
<label for="dob">Date of Birth (YYYY-MM-DD):</label>
<input type="text" id="dob" required<br><br>
<label for="joining-date">Joining Date (YYYY-MM-DD):</label>
<input type ="text" id="joining-date" name="joining-date"required<br><br>
<label for="salary">Salary:</label>
<input type="text" id="salary" name="salary"required><br><br>
<input type="submit"value="Submit">
</form>
</body>
</html>
